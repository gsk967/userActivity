// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	CreateUsersReq(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*CreateUsersResponse, error)
	GetUserActivityServiceReq(ctx context.Context, in *GetUserActivityReq, opts ...grpc.CallOption) (*UserActivity, error)
	AddUserActivityServiceReq(ctx context.Context, in *CreateUserActivityReq, opts ...grpc.CallOption) (*CreateUserActivityResponse, error)
	UpdateUserActivityServiceReq(ctx context.Context, in *UpdateActivityStatusReq, opts ...grpc.CallOption) (*UpdateActivityStatusResponse, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) CreateUsersReq(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*CreateUsersResponse, error) {
	out := new(CreateUsersResponse)
	err := c.cc.Invoke(ctx, "/gsk967.userActivity.Users/CreateUsersReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUserActivityServiceReq(ctx context.Context, in *GetUserActivityReq, opts ...grpc.CallOption) (*UserActivity, error) {
	out := new(UserActivity)
	err := c.cc.Invoke(ctx, "/gsk967.userActivity.Users/GetUserActivityServiceReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) AddUserActivityServiceReq(ctx context.Context, in *CreateUserActivityReq, opts ...grpc.CallOption) (*CreateUserActivityResponse, error) {
	out := new(CreateUserActivityResponse)
	err := c.cc.Invoke(ctx, "/gsk967.userActivity.Users/AddUserActivityServiceReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateUserActivityServiceReq(ctx context.Context, in *UpdateActivityStatusReq, opts ...grpc.CallOption) (*UpdateActivityStatusResponse, error) {
	out := new(UpdateActivityStatusResponse)
	err := c.cc.Invoke(ctx, "/gsk967.userActivity.Users/UpdateUserActivityServiceReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	CreateUsersReq(context.Context, *UserInfo) (*CreateUsersResponse, error)
	GetUserActivityServiceReq(context.Context, *GetUserActivityReq) (*UserActivity, error)
	AddUserActivityServiceReq(context.Context, *CreateUserActivityReq) (*CreateUserActivityResponse, error)
	UpdateUserActivityServiceReq(context.Context, *UpdateActivityStatusReq) (*UpdateActivityStatusResponse, error)
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) CreateUsersReq(context.Context, *UserInfo) (*CreateUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsersReq not implemented")
}
func (UnimplementedUsersServer) GetUserActivityServiceReq(context.Context, *GetUserActivityReq) (*UserActivity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActivityServiceReq not implemented")
}
func (UnimplementedUsersServer) AddUserActivityServiceReq(context.Context, *CreateUserActivityReq) (*CreateUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserActivityServiceReq not implemented")
}
func (UnimplementedUsersServer) UpdateUserActivityServiceReq(context.Context, *UpdateActivityStatusReq) (*UpdateActivityStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserActivityServiceReq not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_CreateUsersReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUsersReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gsk967.userActivity.Users/CreateUsersReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUsersReq(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUserActivityServiceReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUserActivityServiceReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gsk967.userActivity.Users/GetUserActivityServiceReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUserActivityServiceReq(ctx, req.(*GetUserActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_AddUserActivityServiceReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).AddUserActivityServiceReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gsk967.userActivity.Users/AddUserActivityServiceReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).AddUserActivityServiceReq(ctx, req.(*CreateUserActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateUserActivityServiceReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivityStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUserActivityServiceReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gsk967.userActivity.Users/UpdateUserActivityServiceReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUserActivityServiceReq(ctx, req.(*UpdateActivityStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gsk967.userActivity.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUsersReq",
			Handler:    _Users_CreateUsersReq_Handler,
		},
		{
			MethodName: "GetUserActivityServiceReq",
			Handler:    _Users_GetUserActivityServiceReq_Handler,
		},
		{
			MethodName: "AddUserActivityServiceReq",
			Handler:    _Users_AddUserActivityServiceReq_Handler,
		},
		{
			MethodName: "UpdateUserActivityServiceReq",
			Handler:    _Users_UpdateUserActivityServiceReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
